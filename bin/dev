#! /usr/bin/env node
const once = require('ramda').once
const webpack = require('webpack')
const nodemon = require('nodemon')
const path = require('path')
const fs = require('fs')

process.on('SIGINT', process.exit)

const defaultConfig = require( path.resolve(path.join(__dirname, '../config/backpack.config')) )
const paths = require( path.resolve( path.join(__dirname, '../config/paths') ) )

const options = {
  env: 'development'
}

const configPath = path.resolve('f3.config.js')
let userConfig = {}

if (fs.existsSync(configPath)) {
  const userConfigModule = require(configPath)
  console.log('userConfigModule', userConfigModule)
  userConfig = userConfigModule.default || userConfigModule
}

const serverConfig = userConfig.backpack.webpack
      ? userConfig.backpack.webpack(defaultConfig(options), options, webpack)
      : defaultConfig(options)


const serverCompiler = webpack(serverConfig)

const startServer = () => {
  const serverPaths = Object.keys(serverCompiler.options.entry)
    .map(entry => path.join(serverCompiler.options.output.path, `${entry}.js`))
  nodemon({ script: serverPaths[0], watch: serverPaths, nodeArgs: process.argv.slice(2) })
    .on('quit', process.exit)
}

const startServerOnce = once((err, stats) => {
  if (err) return
  startServer()
})
serverCompiler.watch(serverConfig.watchOptions || {}, startServerOnce)