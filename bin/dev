#! /usr/bin/env node
const pretty = require('pretty-error')
const once = require('ramda').once
const webpack = require('webpack')
const nodemon = require('nodemon')
const path = require('path')
const fs = require('fs')

process.on('SIGINT', process.exit)

try {

	const defaultConfig = require( '../config/backpack.config' )

	const options = {
	  env: 'development'
	}

	const configPath = path.resolve('f3.config.js')
	let userConfig = {}

	if (fs.existsSync(configPath)) {
	  const userConfigModule = require(configPath)
	  userConfig = userConfigModule.default || userConfigModule
	}

	const serverConfig = userConfig.backpack
	    ? userConfig.backpack(defaultConfig(options), options, webpack)
	    : defaultConfig(options)

	const serverCompiler = webpack(serverConfig)

	const startServer = () => {
	  const serverPaths = Object.keys(serverCompiler.options.entry)
	    .map(entry => path.join(serverCompiler.options.output.path, `${entry}.js`))
	  nodemon({ script: serverPaths[0], watch: serverPaths, nodeArgs: process.argv.slice(2) })
	    .on('quit', process.exit)
	}

	const startServerOnce = once((err, stats) => {
	  if (err) return
	  startServer()
	})
	serverCompiler.watch(serverConfig.watchOptions || {}, startServerOnce)

} catch(err) {
	const pe = new pretty()
	console.log(pe.render(err))
}